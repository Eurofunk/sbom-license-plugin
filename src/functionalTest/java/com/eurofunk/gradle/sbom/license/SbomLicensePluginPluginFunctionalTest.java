/*
 * This source file was generated by the Gradle 'init' task
 */
package com.eurofunk.gradle.sbom.license;

import org.apache.commons.io.FileUtils;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.UnexpectedBuildResultException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * A simple functional test for the plugin.
 */
class SbomLicensePluginPluginFunctionalTest {

    private static final String RESOURCES_PATH = "src/functionalTest/resources/%s";
    private static final String POLICY_IMPORTS = """
            import com.eurofunk.gradle.sbom.license.ComponentBuilder
            import com.eurofunk.gradle.sbom.license.ExpressionBuilder
            import com.eurofunk.gradle.sbom.license.policy.model.CoordinatesCondition
            import com.eurofunk.gradle.sbom.license.policy.model.LicenseGroupCondition
            import com.eurofunk.gradle.sbom.license.policy.model.Policy
            """;
    private static final String PLUGIN_DEFINITION = """
            plugins {
                id("com.eurofunk.gradle.sbom-license-plugin")
            }
            """;
    private static final String INLINE_POLICY_COORDINATES_MATCHES_COM_EXAMPLE = """           
            policies = listOf(
                Policy(
                    "example", CoordinatesCondition("com.example.*", null, null, CoordinatesCondition.Operator.MATCHES)
                )
            )
            """;
    private static final String INLINE_POLICY_LICENSE_GROUP_IS_PERMISSIVE = """
            policies = listOf(
                Policy(
                    "permissive license", LicenseGroupCondition("Permissive", LicenseGroupCondition.Operator.IS)
                )
            )
            """;
    @TempDir
    File projectDir;

    private static void writeString(final File file, final String string) throws IOException {
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }

    private File getBuildFile() {
        return new File(projectDir, "build.gradle.kts");
    }

    private File getSettingsFile() {
        return new File(projectDir, "settings.gradle.kts");
    }

    @Test
    void policyMatchResultsInFail() throws IOException {
        final String buildFile = BuildFileBuilder.create()
                .append(PLUGIN_DEFINITION)
                .beginCheckLicenses()
                .appendTaskFile("policiesFile", "policy_com-example.json")
                .appendTaskFile("sbomFile", "sbom_com-example.json")
                .endCheckLicenses()
                .build();

        writeString(getSettingsFile(), "");
        writeString(getBuildFile(), buildFile);

        copyResourcesFileToTargetDir("policy_com-example.json");
        copyResourcesFileToTargetDir("sbom_com-example.json");

        try (final StringWriter writer = new StringWriter()) {
            final GradleRunner runner = GradleRunner.create()
                    .withProjectDir(projectDir)
                    .withArguments("checkLicenses")
                    .withPluginClasspath()
                    .forwardOutput()
                    .withDebug(true)
                    .forwardStdError(writer);

            assertThrows(UnexpectedBuildResultException.class, runner::build);
            assertTrue(writer.toString().contains("Some policy violations were detected. See log for details."));
        }
    }

    @Test
    void inlinePolicyMatchHasPrecedenceBeforeFileAndResultsInFail() throws IOException {
        final String buildFile = BuildFileBuilder.create()
                .append(POLICY_IMPORTS)
                .append(PLUGIN_DEFINITION)
                .beginCheckLicenses()
                .appendTaskPart(INLINE_POLICY_COORDINATES_MATCHES_COM_EXAMPLE)
                .appendTaskFile("policiesFile", "policy_com-eurofunk.json")
                .appendTaskFile("sbomFile", "sbom_com-example-eurofunk.json")
                .endCheckLicenses()
                .build();
        writeString(getSettingsFile(), "");
        writeString(getBuildFile(), buildFile);


        copyResourcesFileToTargetDir("policy_com-eurofunk.json");
        copyResourcesFileToTargetDir("sbom_com-example-eurofunk.json");

        try (final StringWriter writer = new StringWriter()) {
            final GradleRunner runner = GradleRunner.create()
                    .withProjectDir(projectDir)
                    .withArguments("checkLicenses")
                    .withPluginClasspath()
                    .withDebug(true)
                    .forwardOutput()
                    .forwardStdError(writer);

            assertThrows(UnexpectedBuildResultException.class, runner::build);
            final String output = writer.toString();
            assertTrue(output.contains("Some policy violations were detected. See log for details."));
            assertTrue(output.contains("Policy [example] has violations"));
            assertFalse(output.contains("Policy [eurofunk] has violations"));
        }
    }

    @Test
    void customLicenseExpressionFileAddsLicenseAndPolicyFails() throws IOException {
        final String buildFile = BuildFileBuilder.create()
                .append(POLICY_IMPORTS)
                .append(PLUGIN_DEFINITION)
                .beginCheckLicenses()
                .appendTaskPart(INLINE_POLICY_LICENSE_GROUP_IS_PERMISSIVE)
                .appendTaskFile("customLicensesFile", "license_expression-com-example-apache2.0.json")
                .appendTaskFile("sbomFile", "sbom_com-example-empty-license.json")
                .endCheckLicenses()
                .build();

        writeString(getSettingsFile(), "");
        writeString(getBuildFile(), buildFile);

        copyResourcesFileToTargetDir("license_expression-com-example-apache2.0.json");
        copyResourcesFileToTargetDir("sbom_com-example-empty-license.json");

        try (final StringWriter writer = new StringWriter()) {
            final GradleRunner runner = GradleRunner.create()
                    .withProjectDir(projectDir)
                    .withArguments("checkLicenses")
                    .withPluginClasspath()
                    .forwardOutput()
                    .withDebug(true)
                    .forwardStdError(writer);

            assertThrows(UnexpectedBuildResultException.class, runner::build);
            final String output = writer.toString();
            assertTrue(output.contains("Policy [permissive license] has violations"));
            assertTrue(output.contains("[Apache-2.0] is in license group [Permissive]"));
        }
    }

    @Test
    void customLicenseExpressionHasPrecedenceBeforeFileAndResultsInOk() throws IOException {
        final String buildFile = BuildFileBuilder.create()
                .append(POLICY_IMPORTS)
                .append(PLUGIN_DEFINITION)
                .beginCheckLicenses()
                .appendTaskPart(INLINE_POLICY_LICENSE_GROUP_IS_PERMISSIVE)
                .appendTaskPart("""
                        customLicenses = listOf(
                                ComponentBuilder().withGroup("com.example.test").withName("some.*")
                                    .withExpression(ExpressionBuilder().withValue("GPL-3.0-only").build()).build()
                            )
                        """)
                .appendTaskFile("customLicensesFile", "license_expression-com-example-apache2.0.json")
                .appendTaskFile("sbomFile", "sbom_com-example-empty-license.json")
                .endCheckLicenses()
                .build();

        writeString(getSettingsFile(), "");
        writeString(getBuildFile(), buildFile);

        copyResourcesFileToTargetDir("license_expression-com-example-apache2.0.json");
        copyResourcesFileToTargetDir("sbom_com-example-empty-license.json");

        try (final StringWriter writer = new StringWriter()) {
            final GradleRunner runner = GradleRunner.create()
                    .withProjectDir(projectDir)
                    .withArguments("checkLicenses")
                    .withPluginClasspath()
                    .withDebug(true)
                    .forwardStdOutput(writer)
                    .forwardStdError(writer);
            runner.build();
            final String output = writer.toString();
            assertTrue(output.contains("No policy violations detected. All dependencies are compliant with the configured policies."));
        }
    }

    @Test
    void customLicenseGroupIsUsed() throws IOException {
        final String buildFile = BuildFileBuilder.create()
                .append(POLICY_IMPORTS)
                .append(PLUGIN_DEFINITION)
                .beginCheckLicenses()
                .appendTaskPart("""
                        policies = listOf(
                            Policy(
                                "custom license group", LicenseGroupCondition("custom-group-1", LicenseGroupCondition.Operator.IS_NOT)
                            )
                        )
                        """)
                .appendTaskFile("licenseGroupsFile", "license_groups-custom.json")
                .appendTaskFile("sbomFile", "sbom_com-example-eurofunk.json")
                .endCheckLicenses()
                .build();

        writeString(getSettingsFile(), "");
        writeString(getBuildFile(), buildFile);

        copyResourcesFileToTargetDir("license_groups-custom.json");
        copyResourcesFileToTargetDir("sbom_com-example-eurofunk.json");

        try (final StringWriter writer = new StringWriter()) {
            final GradleRunner runner = GradleRunner.create()
                    .withProjectDir(projectDir)
                    .withArguments("checkLicenses")
                    .withPluginClasspath()
                    .forwardOutput()
                    .withDebug(true)
                    .forwardStdError(writer);

            assertThrows(UnexpectedBuildResultException.class, runner::build);
            final String output = writer.toString();
            assertTrue(output.contains("Policy [custom license group] has violations"));
            assertTrue(output.contains("license group is not the group 'custom-group-1'"));
        }
    }

    private void copyResourcesFileToTargetDir(final String fileName) {
        final File file = new File(RESOURCES_PATH.formatted(fileName));
        try {
            FileUtils.copyFile(file, new File(projectDir, file.getName()));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    static class BuildFileBuilder {
        private final StringBuilder content = new StringBuilder();

        static BuildFileBuilder create() {
            return new BuildFileBuilder();
        }

        BuildFileBuilder append(final String text) {
            content.append(text).append("\n");
            return this;
        }

        BuildFileBuilder beginCheckLicenses() {
            content.append("tasks.checkLicenses {\n");
            return this;
        }

        BuildFileBuilder endCheckLicenses() {
            content.append("}\n");
            return this;
        }

        BuildFileBuilder appendTaskFile(final String fileName, final String fileLocation) {
            content.append("%s = file(\"%s\")\n".formatted(fileName, fileLocation));
            return this;
        }

        BuildFileBuilder appendTaskPart(final String taskPart) {
            content.append(taskPart).append("\n");
            return this;
        }

        String build() {
            return content.toString();
        }
    }
}
